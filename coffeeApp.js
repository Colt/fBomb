// Generated by CoffeeScript 1.6.3
(function() {
  var app, compressor, eraseTweets, express, grunt, http, newrelic, path, routes, tweets, twit, twitter, util;

  express = require('express');

  routes = require('./routes');

  newrelic = require('newrelic');

  http = require('http');

  path = require('path');

  util = require('util');

  twitter = require('twitter');

  compressor = require('node-minify');

  grunt = require('grunt');

  grunt.loadNpmTasks('grunt-contrib-coffee');

  grunt.tasks([], {}, function() {
    return grunt.log.ok("Grunt: Done running tasks!");
  });

  app = express();

  app.set('port', process.env.PORT || 3000);

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(express.logger('dev'));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, "public")));

  new compressor.minify({
    type: 'uglifyjs',
    fileIn: 'assets/js/fBomb.js',
    fileOut: 'public/js/fBomb.min.js',
    callback: function(err) {
      if (err) {
        return console.log('minify: ' + err);
      }
    }
  });

  app.configure('development', function() {
    app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
    return app.locals.pretty = true;
  });

  app.configure('production', function() {
    return app.use(express.errorHandler());
  });

  tweets = [];

  twit = new twitter({
    consumer_key: process.env.consumer_key,
    consumer_secret: process.env.consumer_secret,
    access_token_key: process.env.oauth_token,
    access_token_secret: process.env.oauth_token_secret
  });

  twit.stream('statuses/filter', {
    track: 'fuck'
  }, function(stream) {
    var id;
    id = 0;
    return stream.on('data', function(data) {
      if (data.geo) {
        return tweets.push({
          text: data.text,
          coordinates: data.geo.coordinates,
          id: id++
        });
      }
    });
  });

  getTweets = function() {return tweets;};

  eraseTweets = function() {
    console.log("Erasing Tweets");
    return tweets = [];
  };

  setInterval(eraseTweets, 5000);

  app.get('/', routes.index);

  app.get('/data', routes.data);

  http.createServer(app).listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

}).call(this);
